ques -> https://leetcode.com/problems/product-of-array-except-self/description/

// Brute Force
//Time complexity-> O(n^2)
//Space complexity-> O(1) extra space.
                     O(n) space for the output array.


public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] res = new int[n];

        for (int i = 0; i < n; i++) {
            int prod = 1;
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    prod *= nums[j];
                }
            }
            res[i] = prod;
        }
        return res;
    }
}


// Optimal Approach
//Time complexity-> O(n)
//Space complexity-> O(1) extra space.
                     O(n) space for the output array.


class Solution {
    public int[] productExceptSelf(int[] num){
        int[] left  = new int[num.length];
        int[] right = new int[num.length];

        left[0] =1;
        for(int i=1 ;i<num.length;i++){
            left[i] = left[i-1] * num[i-1];
        }

         right[num.length-1] =1;
        for(int i=num.length-2 ;i>=0;i--){
            right[i] = right[i+1] * num[i+1];
        }

        int[] ans = new int[num.length];

        for(int i=0;i<num.length;i++){
            ans[i] = left[i] * right[i];
        }

        return ans;
   }
}
