Question link -> https://leetcode.com/problems/group-anagrams/description/

//HashMap using Sorting
//Time complexity: O(m∗nlogn)
//Space complexity: O(m∗n)

public class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> res = new HashMap<>();
        for (String s : strs) {
            char[] charArray = s.toCharArray();
            Arrays.sort(charArray);
            String sortedS = new String(charArray);
            res.putIfAbsent(sortedS, new ArrayList<>());
            res.get(sortedS).add(s);
        }
        return new ArrayList<>(res.values());
    }
}

//HashMap using Frequency
//Time complexity: O(m∗n)
//Space complexity:O(m∗n)


class Solution {
    private String getFrequencyString(String str) {
        //creating a frequency array
        int[] freq = new int[26];

        char[] chars = str.toCharArray();

        for (char c : chars) {
            freq[c - 'a']++;
        }
        StringBuilder frequencyString = new StringBuilder("");
        char c = 'a';
        for (int i : freq) {
            frequencyString.append(c);
            frequencyString.append(i);
            c++;

        }
        return frequencyString.toString();

    }

    public List<List<String>> groupAnagrams(String[] strs) {

        if (strs == null || strs.length == 0) {
            return new ArrayList<>();
        }
        Map<String, List<String>> freqStrsMap = new HashMap<>();

        for (String str : strs) {
            String frequencyString = getFrequencyString(str);

            //if frequency string is present then add the string as a list
            if (freqStrsMap.containsKey(frequencyString)) {
                freqStrsMap.get(frequencyString).add(str);
            } else {
                //else create an new list
                List<String> strList = new ArrayList<>();
                strList.add(str);
                freqStrsMap.put(frequencyString, strList);

            }
        }
        return new ArrayList<>(freqStrsMap.values());

    }
}
