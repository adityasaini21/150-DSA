Ques Link -> https://leetcode.com/problems/two-sum/
//1. Brute Force
//Time complexity: O(n^2)
//Space complexity: O(1)

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[0];
    }
}


//2. HashMAp 
//Time complexity: O(n)
//Space complexity: O(n)


class Solution {
  public int[] twoSum(int[] nums, int target) {

    Map<Integer,Integer> map = new HashMap<>();

    for(int i=0;i<nums.length;i++){
        int num = nums[i];
        int diff = target - num;

        if(map.containsKey(diff)){
            //map.get() func returns the value from map means index of 2.
            return new int[] {map.get(diff),i};
        }
        map.put(num,i);
    } 
    return new int[] {};
}
}
