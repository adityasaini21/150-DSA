ques-> https://leetcode.com/problems/valid-palindrome/description/


// Reverse String
//Time complexity: O(n)
//Space complexity: O(n)

public class Solution {
    public boolean isPalindrome(String s) {
        StringBuilder newStr = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (Character.isLetterOrDigit(c)) {
                newStr.append(Character.toLowerCase(c));
            }
        }
        return newStr.toString().equals(newStr.reverse().toString());
    }
}

//Two Pointers
//Time complexity: O(n)
//Space complexity: O(1)

class Solution {
    public boolean isPalindrome(String s) {

        String lowerCase = s.toLowerCase();
        String cleaned = lowerCase.replaceAll("[^a-zA-Z0-9]","");

        int left = 0;
        int right = cleaned.length()-1;

        while(left<right){
            if(cleaned.charAt(left)== cleaned.charAt(right)){
                left++;
                right--;

            }else{
                return false;
            }
        }
        return true;

        
    }
}
